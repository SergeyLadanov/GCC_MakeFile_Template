##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.13.0-B3] date: [Thu May 20 10:51:48 MSK 2021]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = MakeTemplate


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og -fno-exceptions -fno-rtti


#######################################
# paths
#######################################
# Build path
BUILD_DIR = Bin

######################################
# source
######################################

# Source file extension
FILE_EXTENSION = .cpp

# C sources
C_SOURCES =  \
Core/Src/main.cpp \
Folder1/Src/file1.cpp



#######################################
# binaries
#######################################
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/g++
AS = $(GCC_PATH)/g++ -x assembler-with-cpp
CP = $(GCC_PATH)/objcopy
SZ = $(GCC_PATH)/size
else
CC = g++
AS = g++ -x assembler-with-cpp
CP = objcopy
SZ = size
endif

 
#######################################
# CFLAGS
#######################################

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-I Folder1/Inc  \
-I Core/Inc


# compile gcc flags
ASFLAGS = $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall

CFLAGS = $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F103VCTx_FLASH.ld

# libraries
LIBS =  
LIBDIR = 
LDFLAGS = $(LIBDIR) $(LIBS)


# default action: build all
all: $(BUILD_DIR)/$(TARGET)


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:$(FILE_EXTENSION)=.o)))
vpath %$(FILE_EXTENSION) $(sort $(dir $(C_SOURCES)))


$(BUILD_DIR)/%.o: %$(FILE_EXTENSION) Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:$(FILE_EXTENSION)=.lst)) $< -o $@


$(BUILD_DIR)/$(TARGET): $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	RMDIR /S /Q $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
